import argparse
import os.path
import sys
import math
from xml.dom import minidom, Node

def getNode(parent, nodeName, nodeNum = 0):
    """ Retourne le noeuf fils (numero:  'nodeNum' and nom 'nodeName') du noeud parent ('parent'); si nodeNum negatif, retourne la liste des noeuds fils du meme nom"""
    currentNodeNum = 0
    noeudsFils = []
    for node in parent.childNodes:
        if node.nodeType == Node.ELEMENT_NODE and node.localName == nodeName:
            if currentNodeNum == nodeNum:
                return node
            else:
                noeudsFils.append(node)
                currentNodeNum = currentNodeNum + 1
    return noeudsFils

def getNodeFromPath(path, rootNode):
    cheminXML = path.split('.')
    currentNode = rootNode
    for noeud in cheminXML:
        currentNode =  getNode(currentNode, noeud)
    return currentNode

# DART sorts the group after setting them to uppercase, and using unicode/lexycographic ordering
# Import the 3D object in the first "punctual object" slot available
# Write a text file with codes allowing to link each group in the OBJ to its position in the XML
# Code will look like "po2_go5", and will match the id in the "scene.scn" generated by DART
# "po2_go5" means the 6th (5+1) group of the 3rd (2+1) punctual object

def readOBJInfos(objPath):
    # Recover the list of groups and bounding box
    
    objFile = open(objPath, "r")
    objFileLines = objFile.readlines()
    
    minX = float('inf')
    minY = float('inf')
    maxX = float('-inf')
    maxY = float('-inf')
    
    groupNames = set()
    
    for line in objFileLines:
        tmpStr = line.split()
        if tmpStr != []: # Check for empty line
            # If it is a vertex
            if tmpStr[0] == 'v':
                # Check for min and max along the X and Y axis
                x = float(tmpStr[3])
                y = float(tmpStr[1])
                minX = min(x, minX)
                minY = min(y, minY)
                maxX = max(x, maxX)
                maxY = max(y, maxY)
            if tmpStr[0] == 'g':
                # Recover the group name and set it to upper case
                groupNames.add((tmpStr[1].upper(), tmpStr[1]))
            # Ignore everything else
    resList = list(groupNames)
    resList.sort()
    return ([j[1] for j in resList], [minX, minY, maxX, maxY])
    
def updateMockUpSceneDimension(xmlFilePath, sizeX, sizeY):
    doc = minidom.parse(xmlFilePath)
    rootNode = doc.documentElement
    
    sceneDimensionNode = getNodeFromPath("Maket.Scene.SceneDimensions", rootNode)
    sceneDimensionNode.setAttribute("x", str(sizeX))
    sceneDimensionNode.setAttribute("y", str(sizeY))
    
    open(xmlFilePath,"w").write(doc.toxml()) # Write the xml
    
def insertOBJIntoXML(xmlFilePath, objPath, groupNames, minX, minY, maxX, maxY, positionX, positionY):
    doc = minidom.parse(xmlFilePath)
    
    rootNode = doc.documentElement
    objectListNode = getNodeFromPath("object_3d.ObjectList", rootNode)
    new3DOjectIndex = len(objectListNode.getElementsByTagName("Object"))
    
    # Create and add the new 3D object
    newOBJNode = doc.createElement("Object")
    newOBJNode.setAttribute("file_src", objPath)
    newOBJNode.setAttribute("hasGroups", "1")
    newOBJNode.setAttribute("hidden", "0")
    newOBJNode.setAttribute("hideRB", "0")
    newOBJNode.setAttribute("isDisplayed", "1")
    newOBJNode.setAttribute("name", os.path.basename(objPath))
    newOBJNode.setAttribute("num", "0")
    newOBJNode.setAttribute("objectColor", "125 125 125")
    newOBJNode.setAttribute("objectDEMMode", "3")
    newOBJNode.setAttribute("repeatedOnBorder", "1")
    
    newGeomProp = doc.createElement("GeometricProperties")
    
    newPosProp = doc.createElement("PositionProperties")
    newPosProp.setAttribute("xpos", str(positionX))
    newPosProp.setAttribute("ypos", str(positionY))
    newPosProp.setAttribute("zpos", "0")
    newGeomProp.appendChild(newPosProp);
    
    newDimProp = doc.createElement("Dimension3D")
    newDimProp.setAttribute("xdim", str(maxX-minX))
    newDimProp.setAttribute("ydim", str(maxY-minY))
    newDimProp.setAttribute("zdim", "0")
    newGeomProp.appendChild(newDimProp);
    
    newCentProp = doc.createElement("Center3D")
    newCentProp.setAttribute("xCenter", str((maxX+minX)/2))
    newCentProp.setAttribute("yCenter", str((maxY+minY)/2))
    newCentProp.setAttribute("zCenter", "0")
    newGeomProp.appendChild(newCentProp);
    
    newScaleProp = doc.createElement("ScaleProperties")
    newScaleProp.setAttribute("xScaleDeviation", "0")
    newScaleProp.setAttribute("xscale", "1")
    newScaleProp.setAttribute("yScaleDeviation", "0")
    newScaleProp.setAttribute("yscale", "1")
    newScaleProp.setAttribute("zScaleDeviation", "0")
    newScaleProp.setAttribute("zscale", "1")
    newGeomProp.appendChild(newScaleProp);
    
    newRotProp = doc.createElement("RotationProperties")
    newRotProp.setAttribute("xRotDeviation", "0")
    newRotProp.setAttribute("xrot", "0")
    newRotProp.setAttribute("yRotDeviation", "0")
    newRotProp.setAttribute("yrot", "0")
    newRotProp.setAttribute("zRotDeviation", "0")
    newRotProp.setAttribute("zrot", "0")
    newGeomProp.appendChild(newRotProp);
    
    newOBJNode.appendChild(newGeomProp);
    
    newOTProp = doc.createElement("ObjectTypeProperties")
    newOTProp.setAttribute("sameOTObject", "0")
    newOBJNode.appendChild(newOTProp);
    
    newOPProp = doc.createElement("ObjectOpticalProperties")
    newOPProp.setAttribute("doubleFace", "0")
    newOPProp.setAttribute("isLAICalc", "0")
    newOPProp.setAttribute("isSingleGlobalLai", "0")
    newOPProp.setAttribute("sameOPObject", "0")
    newOPProp.setAttribute("useTemperaturePerTriangle", "0")
    newOPProp.setAttribute("transparent", "0")
    newOBJNode.appendChild(newOPProp);
    
    newGroupsProp = doc.createElement("Groups")
    
    for i in range(len(groupNames)):
        # <Group>
        newGroupProp = doc.createElement("Group")
        newGroupProp.setAttribute("groupDEMMode", "0")
        newGroupProp.setAttribute("hasElements", "0")
        newGroupProp.setAttribute("hidden", "0")
        newGroupProp.setAttribute("hideRB", "0")
        newGroupProp.setAttribute("isLAICalc", "0")
        newGroupProp.setAttribute("transparent", "0")
        newGroupProp.setAttribute("name", groupNames[i])
        newGroupProp.setAttribute("num", str(i + 1))
        
        #   <GroupOpticalProperties>
        newGOpProp = doc.createElement("GroupOpticalProperties")
        newGOpProp.setAttribute("doubleFace", "1")
        newGOpProp.setAttribute("sameOPGroup", "1")
        newGOpProp.setAttribute("useTemperaturePerTriangle", "0")
        
        #       <OpticalPropertyLink>
        newGroupFrontFaceOPProp = doc.createElement("OpticalPropertyLink")
        newGroupFrontFaceOPProp.setAttribute("ident", "GroupOpticalProperty")
        newGroupFrontFaceOPProp.setAttribute("indexFctPhase", "0")
        newGroupFrontFaceOPProp.setAttribute("type", "0")
        newGOpProp.appendChild(newGroupFrontFaceOPProp);
        #       </OpticalPropertyLink>
        
        #       <BackFaceOpticalProperty>
        newGroupBackFaceOPNodeProp = doc.createElement("BackFaceOpticalProperty")
        
        #           <OpticalPropertyLink>
        newGroupBackFaceOPProp = doc.createElement("OpticalPropertyLink")
        newGroupBackFaceOPProp.setAttribute("ident", "GroupOpticalProperty")
        newGroupBackFaceOPProp.setAttribute("indexFctPhase", "0")
        newGroupBackFaceOPProp.setAttribute("type", "0")
        newGroupBackFaceOPNodeProp.appendChild(newGroupBackFaceOPProp);
        #           </OpticalPropertyLink>
        
        newGOpProp.appendChild(newGroupBackFaceOPNodeProp);
        #       </BackFaceOpticalProperty>
        
        #       <TemperaturePerTriangleProperty>
        newGroupTempProp = doc.createElement("ThermalPropertyLink")
        newGroupTempProp.setAttribute("idTemperature", "Temperature_290_310")
        newGroupTempProp.setAttribute("indexTemperature", "0")
        newGOpProp.appendChild(newGroupTempProp);
        #       </TemperaturePerTriangleProperty>
        
        newGroupProp.appendChild(newGOpProp);
        #   </GroupOpticalProperties>
        
        #   <GroupTypeProperties>
        newGroupGTPProp = doc.createElement("GroupTypeProperties")
        newGroupGTPProp.setAttribute("sameOTGroup", "1")
        
        #       <ObjectTypeLink>
        newGroupOTLProp = doc.createElement("ObjectTypeLink")
        newGroupOTLProp.setAttribute("identOType", "Default_Object")
        newGroupOTLProp.setAttribute("indexOT", "101")
        newGroupGTPProp.appendChild(newGroupOTLProp);
        #       </ObjectTypeLink>
        
        newGroupProp.appendChild(newGroupGTPProp);
        #   </GroupTypeProperties>
        
        newGroupsProp.appendChild(newGroupProp);
        # </Group>
    
    newOBJNode.appendChild(newGroupsProp);
    
    objectListNode.appendChild(newOBJNode);
    
    open(xmlFilePath,"w").write(doc.toxml()) # Write the xml
    
    return new3DOjectIndex

def writeXMLLinks(outputPath, objectIndexInXML, groupNames):
    f = open(outputPath,'w')
    
    for i in range(len(groupNames)):
        f.write(groupNames[i] + ";po"+ str(objectIndexInXML) + "_go" + str(i) + "\n")
    
    f.close()

def main(args):
    objFilePath = os.path.abspath(args.obj)
    if not os.path.exists(objFilePath):
        print(objFilePath, "doesn't designate a valid OBJ path")
        exit()
    elif not os.path.isfile(objFilePath):
        print(objFilePath, "doesn't designate a OBJ file")
        exit()
        
    (groupNames, [minX, minY, maxX, maxY]) = readOBJInfos(objFilePath)
    
    print(groupNames)
    print(str(minX), str(minY), str(maxX), str(maxY))
    
    simuFolderPath = args.simu
    if not os.path.exists(simuFolderPath):
        print(simuFolderPath, "doesn't designate a valid simulation input folder path")
        exit()
    elif not os.path.isdir(simuFolderPath):
        print(simuFolderPath, "doesn't designate a valid simulation input folder path")
        exit()
    
    objXmlFilePath = os.path.join(simuFolderPath, "object_3d.xml")
    if not os.path.exists(objXmlFilePath):
        print(simuFolderPath, "doesn't contain the 3D object XML file")
        exit()
        
    if args.posX is not None:
        positionX = args.posX
    else :
        positionX = -minX
        
    if args.posY is not None:
        positionY = args.posY
    else :
        positionY = -minY
    
    objectIndexInXML = insertOBJIntoXML(objXmlFilePath, objFilePath, groupNames, minX, minY, maxX, maxY, positionX, positionY)
    
    if args.output is not None:
        outputPath = args.output
    else:
        outputPath = os.path.join(simuFolderPath, "objToXML.txt")
    
    writeXMLLinks(outputPath, objectIndexInXML, groupNames)
    
if __name__ == "__main__":
    ## Get argument parser
    parser = argparse.ArgumentParser(description="Imports an OBJ into a pre-built DART simulation")

    ## Add argument
    parser.add_argument("obj", action="store", type=str,
                        help="OBJ file path"
                       )
    parser.add_argument("simu", action="store", type=str,
                        help="Simulation input folder path"
                       )
    parser.add_argument("-o", "--output", action="store", type=str,
                        default=None,
                        help="Path of the OBJ-group-to-XML correspondence file. Default one is named 'objToXML.txt' and put in the same folder as the XML"
                       )
    parser.add_argument("-x", "--posX", action="store", type=float,
                        default=None,
                        help="X coordinate where to put the object. If not provided, the object will be setup so that its lowest X coordinates is located at 0.0"
                       )
    parser.add_argument("-y", "--posY", action="store", type=float,
                        default=None,
                        help="Y coordinate where to put the object. If not provided, the object will be setup so that its lowest Y coordinates is located at 0.0"
                       )

    ## Parse argument
    args = parser.parse_args()

    ## Launch
    main(args)
